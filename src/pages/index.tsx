import Head from "next/head";
import { useRef, useState } from "react";
import { toast } from "react-toastify";

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <ClockCountdown />
      </main>
    </>
  );
}

function ClockCountdown() {
  const dateTimeRef = useRef<HTMLInputElement>(null);
  const [DateTimeURL, setDateTimeURL] = useState('')
  const [DisplayURL, setDisplaURL] = useState('')

  return (
    <div
      className="flex shadow-xl rounded-lg p-5 flex-col"
    >
      <h1 className="font-bold text-xl">Clock Countdown</h1>
      <input type="datetime-local" className="bg-inherit focus:outline-none" ref={dateTimeRef}/>
      <button
        onClick={async () => {
          if (!dateTimeRef.current?.value) return toast.error('Please select a time')
          setDateTimeURL(`http://localhost:3000/timer/clock?data=${new Date(dateTimeRef.current.value).getTime()}`)
          setDisplaURL(`http://localhost:3000/timer/date?data=${new Date(dateTimeRef.current.value).getTime()}`)
        }}
        className="mt-2"
      >Create Countdown</button>
      {
        DateTimeURL &&
        <div className="w-full flex flex-row mt-5">
        <input type="text" contentEditable={false} readOnly className="w-5/6 bg-inherit focus:outline-none" value={DateTimeURL} />
          <button
              className="w-1/6 flex items-center justify-center text-center"
              onClick={() => {
                try {
                  navigator.clipboard
                    .writeText(DateTimeURL)
                    .then(() => toast.success('Copied to Clipboard'))
                    .catch((() => {
                      toast.error(`Failed to Copy to Clipboard`);
                      return Promise.resolve();
                    }) as () => Promise<void>)
                } catch (error) {
                  console.error(error)
                }
              }}
            >
              <CopyIcon />
            </button>
        </div>
      }
      {
        DisplayURL &&
        <div className="w-full flex flex-row mt-5">
        <input type="text" contentEditable={false} readOnly className="w-5/6 bg-inherit focus:outline-none" value={DisplayURL} />
          <button
              className="w-1/6 flex items-center justify-center text-center"
              onClick={() => {
                try {
                  navigator.clipboard
                    .writeText(DisplayURL)
                    .then(() => toast.success('Copied to Clipboard'))
                    .catch((() => {
                      toast.error(`Failed to Copy to Clipboard`);
                      return Promise.resolve();
                    }) as () => Promise<void>)
                } catch (error) {
                  console.error(error)
                }
              }}
            >
              <CopyIcon />
            </button>
        </div>
      }
    </div>
  )
}

function CopyIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-copy" viewBox="0 0 16 16">
      <path fillRule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/>
    </svg>
  )
}
